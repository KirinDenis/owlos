// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OWLOSEcosystemService.Data;

namespace OWLOSEcosystemService.Migrations.ThingsDb
{
    [DbContext(typeof(ThingsDbContext))]
    [Migration("20210708191523_CreateThingsSchema")]
    partial class CreateThingsSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("OWLOSEcosystemService.DTO.Things.ThingConnectionPropertiesDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("HTTPEnable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HTTPHost")
                        .HasColumnType("longtext");

                    b.Property<uint>("HTTPPort")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("HTTPStatus")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<int>("UARTBaudRate")
                        .HasColumnType("int");

                    b.Property<bool>("UARTEnable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UARTPort")
                        .HasColumnType("longtext");

                    b.Property<uint>("UARTStatus")
                        .HasColumnType("int unsigned");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("ThingConnectionProperties");
                });

            modelBuilder.Entity("OWLOSEcosystemService.Models.Things.ThingAirQualityModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DHTSensorid")
                        .HasColumnType("int");

                    b.Property<int?>("LightSensorid")
                        .HasColumnType("int");

                    b.Property<int?>("MQ7Sensorid")
                        .HasColumnType("int");

                    b.Property<DateTime>("QueryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<int?>("TestAnalogSensorid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DHTSensorid");

                    b.HasIndex("LightSensorid");

                    b.HasIndex("MQ7Sensorid");

                    b.HasIndex("TestAnalogSensorid");

                    b.ToTable("ThingAirQuality");
                });

            modelBuilder.Entity("OWLOSEcosystemService.Models.Things.ThingDHTSensor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Celsius")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Exists")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("HeatIndex")
                        .HasColumnType("double");

                    b.Property<string>("HeatIndexHistory")
                        .HasColumnType("longtext");

                    b.Property<double>("Humidity")
                        .HasColumnType("double");

                    b.Property<string>("HumidityHistory")
                        .HasColumnType("longtext");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.Property<string>("TemperatureHistory")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("ThingDHTSensor");
                });

            modelBuilder.Entity("OWLOSEcosystemService.Models.Things.ThingSensor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Exists")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.Property<string>("ValueHistory")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("ThingSensor");
                });

            modelBuilder.Entity("OWLOSEcosystemService.Models.Things.ThingAirQualityModel", b =>
                {
                    b.HasOne("OWLOSEcosystemService.Models.Things.ThingDHTSensor", "DHTSensor")
                        .WithMany()
                        .HasForeignKey("DHTSensorid");

                    b.HasOne("OWLOSEcosystemService.Models.Things.ThingSensor", "LightSensor")
                        .WithMany()
                        .HasForeignKey("LightSensorid");

                    b.HasOne("OWLOSEcosystemService.Models.Things.ThingSensor", "MQ7Sensor")
                        .WithMany()
                        .HasForeignKey("MQ7Sensorid");

                    b.HasOne("OWLOSEcosystemService.Models.Things.ThingSensor", "TestAnalogSensor")
                        .WithMany()
                        .HasForeignKey("TestAnalogSensorid");

                    b.Navigation("DHTSensor");

                    b.Navigation("LightSensor");

                    b.Navigation("MQ7Sensor");

                    b.Navigation("TestAnalogSensor");
                });
#pragma warning restore 612, 618
        }
    }
}
